<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd     
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd">
	
	<!-- JDBC 配置信息 -->
	<util:properties id="jdbc" location="classpath:com/hyf/entryexit/config/db/db.properties"/>
	<!-- dbcp DataSource 管理数据库连接 -->
	<bean id="dbcpDataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="#{jdbc.driver}"/>
		<property name="url" value="#{jdbc.url}"/>
		<property name="username" value="#{jdbc.username}"/>
		<property name="password" value="#{jdbc.password}"/>
		<!--initialSize: 初始化连接-->  
		<property name="initialSize" value="#{jdbc['pool.initialSize']}"/>
		<!--maxActive: 最大连接数量--> 
		<property name="maxActive" value="#{jdbc['pool.maxActive']}"/> 
		<!--maxIdle: 最大空闲连接--> 
		<property name="maxIdle" value="#{jdbc['pool.maxIdle']}"/> 
		<!--minIdle: 最小空闲连接-->  
		<property name="minIdle" value="#{jdbc['pool.minIdle']}"/>
		<!--removeAbandoned: 是否自动回收超时连接--> 
		<property name="removeAbandoned" value="#{jdbc['pool.removeAbandoned']}"/> 
		<!--removeAbandonedTimeout: 超时时间(以秒数为单位)--> 
		<property name="removeAbandonedTimeout" value="#{jdbc['pool.removeAbandonedTimeout']}"/> 
		<!--maxWait: 超时等待时间以毫秒为单位 6000毫秒/1000等于60秒--> 
		<property name="maxWait" value="#{jdbc['pool.maxWait']}"/> 
	</bean>
	<!-- JNDI DataSource for J2EE environments 
		value的值一定要和weblogic里的jndi名称一样才行
	<bean id="dbcpDataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName" value="entryexitJNDI"></property>
	</bean>
	-->
	
	<!-- SqlSessionFactoryBean 是工厂会自动创建  sqlSessionFactory 对象-->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dbcpDataSource"/>
		<!-- 是Mapper xml 文件的位置 -->
		<property name="mapperLocations" value="classpath:com/hyf/entryexit/mapper/*.xml"/>	
	</bean>
	<!-- 利用实例工厂创建Bean实例 -->
	<bean id="sqlSession" scope="prototype" factory-bean="sqlSessionFactory" factory-method="openSession">
	</bean>
	 <!-- 配置MyBatis注解 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
       <!-- 创建容器后，MapperScannerConfigurer会自动扫描当前指定路径下的接口/类 -->
       <property name="basePackage" value="com.hyf.entryexit.dao" />
       <!-- MapperScannerConfigurer自动扫描带有如下注解的接口/类 -->
       <property name="annotationClass" value="com.hyf.entryexit.annotation.MyBatisRepository"/>
	</bean>
	<!-- sqlSessionTemplate 用于支持实现 Dao 模式 -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory"/>
	</bean>
	<!-- 自动注解组件扫描(开启IOC注解扫描) -->
	<context:component-scan base-package="com.hyf.entryexit"/>
	<!-- 开启MVC注解扫描
		要使用spring mvc中的@Controller注解，就必须要配置<mvc:annotation-driven />，
		否则org.springframework.web.servlet.DispatcherServlet无法找到控制器并把请求分发到控制器 
	-->
	<mvc:annotation-driven/>
	
	<!-- 视图处理器 -->
	<bean id="jspView" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/jsp/"/>
		<property name="suffix" value=".jsp"/>
	</bean>	
	
	<!-- 拦截器 -->
	<mvc:interceptors>
		 <!-- 配置Token拦截器，防止用户重复提交数据 -->
	    <mvc:interceptor>
	        <mvc:mapping path="/customer/prebook.form"/>
	        <mvc:mapping path="/customer/savePrebook.form"/>
	        <!-- 不拦截的请求
			<mvc:exclude-mapping path="/login/*"/>-->
	        <bean class="com.hyf.entryexit.interceptor.TokenInterceptor"/>
	    </mvc:interceptor>
		<!-- 业务员登录检查拦截器 -->	
		<mvc:interceptor>
			<mvc:mapping path="/salesman/*"/>
			<bean class="com.hyf.entryexit.interceptor.ClerkLoginInterceptor"/>
		</mvc:interceptor>
		<!-- 管理员登录检查拦截器 -->	
		<mvc:interceptor>
			<mvc:mapping path="/admin/*"/>
			<bean class="com.hyf.entryexit.interceptor.SuperUserLoginInterceptor"/>
		</mvc:interceptor>
	</mvc:interceptors>

	<!-- 处理异常 -->
	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
	        <props>		
	             <prop key="java.lang.Exception">msg</prop>
	        </props>
	    </property>
	</bean>	
	
	<!-- 开启AOP注解扫描 -->
	<aop:aspectj-autoproxy proxy-target-class="true"/>
	
	<!-- 用注解方式处理事务不用下面配置方式处理事务 -->	
	<!-- 声明事务管理组件 
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"> 
		<property name="dataSource" ref="dbcpDataSource"/> 
	</bean>
	-->
	<!-- XML配置声明事务范围及类型 
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="find*" read-only="true" />
			<tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
		</tx:attributes>
	</tx:advice>
	<aop:config proxy-target-class="true">
		<aop:advisor advice-ref="txAdvice" pointcut="within(com.hyf.entryexit.controller..*)" />
	</aop:config>		
	-->
</beans>























